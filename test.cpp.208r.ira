
;; Function std::string test(std::string, std::string) (test, funcdef_no=819, decl_uid=20173, cgraph_uid=265)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 5 count 6 (    1)
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Reg 62 uninteresting (no unique first use)
Reg 63: local to bb 2 def dominates all uses has unique first use
Reg 64: local to bb 2 def dominates all uses has unique first use
Reg 68: local to bb 4 def dominates all uses has unique first use
Reg 67 uninteresting
Found def insn 3 for 63 to be not moveable
Found def insn 4 for 64 to be not moveable
Found def insn 42 for 68 to be not moveable
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 4 3 }
;; 3 succs { 5 }
;; 4 succs { }
;; 5 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 65: (insn_list:REG_DEP_TRUE 18 (nil))
Reg 65 has equivalence, initial gains 4

Pass 0 for finding pseudo/allocno costs

    a1 (r68,l0) best AREG, allocno AREG
    a4 (r67,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r66,l0) best DIREG, allocno DIREG
    a3 (r65,l0) best NO_REGS, allocno NO_REGS
    a5 (r64,l0) best DREG, allocno DREG
    a6 (r63,l0) best SIREG, allocno SIREG
    a0 (r62,l0) best AREG, allocno AREG

  a0(r62,l0) costs: AREG:-2000,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:40008,40008 SSE_REGS:40008,40008 MMX_REGS:65013,65013 FP_TOP_SSE_REGS:4065535,4065535 FP_SECOND_SSE_REGS:4065535,4065535 FLOAT_SSE_REGS:4065535,4065535 FLOAT_INT_REGS:4065535,4065535 INT_SSE_REGS:45009,45009 FLOAT_INT_SSE_REGS:4065535,4065535 ALL_REGS:4065535,4065535 MEM:16004,16004
  a1(r68,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a2(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a3(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a5(r64,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16000,16000 SSE_REGS:16000,16000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:18000,18000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16000,16000 SSE_REGS:16000,16000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:18000,18000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000


Pass 1 for finding pseudo/allocno costs

    r68: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r66: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r65: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    r64: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r63: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r62: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r62,l0) costs: AREG:-2000,-2000 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1000,-1000 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:40008,40008 SSE_REGS:40008,40008 MMX_REGS:65013,65013 FP_TOP_SSE_REGS:4065535,4065535 FP_SECOND_SSE_REGS:4065535,4065535 FLOAT_SSE_REGS:4065535,4065535 FLOAT_INT_REGS:4065535,4065535 INT_SSE_REGS:45009,45009 FLOAT_INT_SSE_REGS:4065535,4065535 ALL_REGS:4065535,4065535 MEM:16004,16004
  a1(r68,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a2(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:6,6
  a3(r65,l0) costs: AREG:8,8 DREG:8,8 CREG:8,8 BREG:8,8 SIREG:3,3 DIREG:8,8 AD_REGS:8,8 Q_REGS:8,8 NON_Q_REGS:8,8 INDEX_REGS:8,8 GENERAL_REGS:8,8 LEGACY_REGS:8,8 CLOBBERED_REGS:8,8 SSE_FIRST_REG:24,24 SSE_REGS:24,24 MMX_REGS:34,34 FP_TOP_SSE_REGS:131078,131078 FP_SECOND_SSE_REGS:131078,131078 FLOAT_SSE_REGS:131078,131078 FLOAT_INT_REGS:131078,131078 INT_SSE_REGS:26,26 FLOAT_INT_SSE_REGS:131078,131078 ALL_REGS:131078,131078 MEM:15,15
  a4(r67,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:16,16 SSE_REGS:16,16 MMX_REGS:26,26 FP_TOP_SSE_REGS:131070,131070 FP_SECOND_SSE_REGS:131070,131070 FLOAT_SSE_REGS:131070,131070 FLOAT_INT_REGS:131070,131070 INT_SSE_REGS:18,18 FLOAT_INT_SSE_REGS:131070,131070 ALL_REGS:131070,131070 MEM:7,7
  a5(r64,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:-1000,-1000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16000,16000 SSE_REGS:16000,16000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:18000,18000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000
  a6(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-2000,-2000 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16000,16000 SSE_REGS:16000,16000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:18000,18000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000

   Insn 37(l0): point = 0
   Insn 34(l0): point = 2
   Insn 26(l0): point = 5
   Insn 25(l0): point = 7
   Insn 23(l0): point = 9
   Insn 22(l0): point = 11
   Insn 21(l0): point = 13
   Insn 20(l0): point = 15
   Insn 19(l0): point = 17
   Insn 18(l0): point = 19
   Insn 42(l0): point = 21
   Insn 47(l0): point = 24
   Insn 13(l0): point = 27
   Insn 12(l0): point = 29
   Insn 11(l0): point = 31
   Insn 10(l0): point = 33
   Insn 9(l0): point = 35
   Insn 8(l0): point = 37
   Insn 4(l0): point = 39
   Insn 3(l0): point = 41
   Insn 2(l0): point = 43
 a0(r62): [18..43] [3..4]
 a1(r68): [8..21]
 a2(r66): [12..15]
 a3(r65): [14..19]
 a4(r67): [16..17]
 a5(r64): [32..39]
 a6(r63): [38..41]
Compressing live ranges: from 46 to 10 - 21%
Ranges after the compression:
 a0(r62): [6..9] [0..1]
 a1(r68): [2..7]
 a2(r66): [2..3]
 a3(r65): [2..7]
 a4(r67): [4..5]
 a5(r64): [8..9]
 a6(r63): [8..9]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r62,l0) conflicts: a1(r68,l0) a5(r64,l0) a6(r63,l0)
;;     total conflict hard regs: 0-2 4 5 37-40
;;     conflict hard regs: 0-2 4 5 37-40

;; a1(r68,l0) conflicts: a0(r62,l0) a2(r66,l0) a4(r67,l0)
;;     total conflict hard regs: 4 5
;;     conflict hard regs: 4 5

;; a2(r66,l0) conflicts: a1(r68,l0)
;;     total conflict hard regs: 4
;;     conflict hard regs: 4

;; a3(r65,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r67,l0) conflicts: a1(r68,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r64,l0) conflicts: a0(r62,l0) a6(r63,l0)
;;     total conflict hard regs: 4 5
;;     conflict hard regs: 4 5

;; a6(r63,l0) conflicts: a0(r62,l0) a5(r64,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

  cp0:a2(r66)<->a4(r67)@1:shuffle
  regions=1, blocks=6, points=10
    allocnos=7 (big 0), copies=1, conflicts=0, ranges=8

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 5 4 3 2
    all: 0r62 1r68 2r66 3r65 4r67 5r64 6r63
    modified regnos: 62 63 64 65 66 67 68
    border:
    Pressure: GENERAL_REGS=4
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
        1:( 0-6 37-44)@14
          2:( 0 2-6 37-44)@26000
            3:( 0 3 6 41-44)@14
              4:( 3 6 41-44)@39008
      Spill a3(r65,l0)
      Allocno a0r62 of GENERAL_REGS(15) has 6 avail. regs  3 6 41-44, node:  3 6 41-44 (confl regs =  0-2 4 5 7-40 45-51)
      Allocno a1r68 of GENERAL_REGS(15) has 7 avail. regs  0 3 6 41-44, node:  0 3 6 41-44 (confl regs =  4 5 7-36 45-51)
      Allocno a2r66 of GENERAL_REGS(15) has 14 avail. regs  0-3 5 6 37-44, ^node:  0-6 37-44 (confl regs =  4 7-36 45-51)
      Allocno a4r67 of GENERAL_REGS(15) has 15 avail. regs  0-6 37-44, node:  0-6 37-44 (confl regs =  7-36 45-51)
      Allocno a5r64 of GENERAL_REGS(15) has 7 avail. regs  1 3 6 41-44, ^node:  0-6 37-44 (confl regs =  4 5 7-36 45-51)
      Allocno a6r63 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 37-44, node:  0 2-6 37-44 (confl regs =  1 7-36 45-51)
      Pushing a4(r67,l0)(cost 0)
      Pushing a2(r66,l0)(cost 0)
      Pushing a1(r68,l0)(cost 0)
      Pushing a6(r63,l0)(cost 0)
      Pushing a5(r64,l0)(cost 0)
      Pushing a0(r62,l0)(cost 0)
      Popping a0(r62,l0)  -- assign reg 3
      Popping a5(r64,l0)  -- assign reg 6
      Popping a6(r63,l0)  -- assign reg 4
      Popping a1(r68,l0)  -- assign reg 6
      Popping a2(r66,l0)  -- assign reg 5
      Popping a4(r67,l0)  -- assign reg 5
Disposition:
    0:r62  l0     3    6:r63  l0     4    5:r64  l0     6    3:r65  l0   mem
    2:r66  l0     5    4:r67  l0     5    1:r68  l0     6
New iteration of spill/restore move
+++Costs: overall -5988, reg -6003, mem 15, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


std::string test(std::string, std::string)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,3u} r1={6d,1u} r2={5d} r4={8d,4u} r5={9d,5u} r6={1d,5u} r7={1d,9u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,4u} r17={6d} r18={4d} r19={4d} r20={1d,6u,2e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r62={1d,4u} r63={1d,1u} r64={1d,1u} r65={1d,1u} r66={1d,1u} r67={1d,1u} r68={1d,1u} 
;;    total ref usage 263{214d,47u,2e} in 21{17 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 62 63 64
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg/f:DI 62 [ <retval> ])
        (reg:DI 5 di [ .result_ptr ])) lib/src/test.cpp:19 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 5 di [ .result_ptr ])
        (nil)))
(insn 3 2 4 2 (set (reg/v/f:DI 63 [ a ])
        (reg:DI 4 si [ a ])) lib/src/test.cpp:19 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 4 si [ a ])
        (nil)))
(insn 4 3 5 2 (set (reg/v/f:DI 64 [ b ])
        (reg:DI 1 dx [ b ])) lib/src/test.cpp:19 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 1 dx [ b ])
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:DI 4 si)
        (reg/v/f:DI 63 [ a ])) /usr/include/c++/4.8.1/bits/basic_string.h:2368 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 63 [ a ])
        (nil)))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg/f:DI 62 [ <retval> ])) /usr/include/c++/4.8.1/bits/basic_string.h:2368 87 {*movdi_internal_rex64}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:DI ("_ZNSsC1ERKSs") [flags 0x41]  <function_decl 0x7f9b22ae1f00 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) /usr/include/c++/4.8.1/bits/basic_string.h:2368 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (reg/v/f:DI 64 [ b ])) /usr/include/c++/4.8.1/bits/basic_string.h:2369 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/v/f:DI 64 [ b ])
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 62 [ <retval> ])) /usr/include/c++/4.8.1/bits/basic_string.h:2369 87 {*movdi_internal_rex64}
     (nil))
(call_insn 13 12 45 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSs6appendERKSs") [flags 0x41]  <function_decl 0x7f9b22aa7400 append>) [0 append S1 A8])
            (const_int 0 [0]))) /usr/include/c++/4.8.1/bits/basic_string.h:2369 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:DI 0 ax)
                (expr_list:REG_EH_REGION (const_int 1 [0x1])
                    (nil)))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
;;  succ:       4 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (NEW, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	
(note 45 13 47 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 47 45 48 3 (set (pc)
        (label_ref 46)) 659 {jump}
     (nil)
 -> 46)
;;  succ:       5 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62

(barrier 48 47 41)
;; basic block 4, loop depth 0, count 0, freq 0
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 4 artificial_defs: { d1(0){ }d7(1){ }}
;; bb 4 artificial_uses: { u17(6){ }u18(7){ }u19(16){ }u20(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68
(code_label/s 41 48 43 4 4 "" [1 uses])
(note 43 41 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 43 18 4 (set (reg:DI 68)
        (reg:DI 0 ax)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 18 42 19 4 (parallel [
            (set (reg/f:DI 65)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/4.8.1/bits/basic_string.h:539 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 19 18 20 4 (set (reg/f:DI 67 [ MEM[(const struct basic_string *)_2(D)]._M_dataplus._M_p ])
        (mem/f:DI (reg/f:DI 62 [ <retval> ]) [6 MEM[(const struct basic_string *)_2(D)]._M_dataplus._M_p+0 S8 A64])) /usr/include/c++/4.8.1/bits/basic_string.h:539 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 62 [ <retval> ])
        (nil)))
(insn 20 19 21 4 (parallel [
            (set (reg/f:DI 66 [ D.22039 ])
                (plus:DI (reg/f:DI 67 [ MEM[(const struct basic_string *)_2(D)]._M_dataplus._M_p ])
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/4.8.1/bits/basic_string.h:539 274 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 67 [ MEM[(const struct basic_string *)_2(D)]._M_dataplus._M_p ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 21 20 22 4 (set (reg:DI 4 si)
        (reg/f:DI 65)) /usr/include/c++/4.8.1/bits/basic_string.h:539 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 65)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 22 21 23 4 (set (reg:DI 5 di)
        (reg/f:DI 66 [ D.22039 ])) /usr/include/c++/4.8.1/bits/basic_string.h:539 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 66 [ D.22039 ])
        (nil)))
(call_insn 23 22 25 4 (call (mem:QI (symbol_ref:DI ("_ZNSs4_Rep10_M_disposeERKSaIcE") [flags 0x41]  <function_decl 0x7f9b2295d200 _M_dispose>) [0 _M_dispose S1 A8])
        (const_int 0 [0])) /usr/include/c++/4.8.1/bits/basic_string.h:539 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (nil))))
(insn 25 23 26 4 (set (reg:DI 5 di)
        (reg:DI 68)) 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg:DI 68)
        (nil)))
(call_insn 26 25 27 4 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7f9b235d1200 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (nil)))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 27 26 46)
;; basic block 5, loop depth 0, count 0, freq 20000, maybe hot
;; Invalid sum of incoming frequencies 10000, should be 20000
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u34(6){ }u35(7){ }u36(16){ }u37(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62
;; lr  def 	 0 [ax]
(code_label 46 27 40 5 5 "" [1 uses])
(note 40 46 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 40 37 5 (set (reg/i:DI 0 ax)
        (reg/f:DI 62 [ <retval> ])) lib/src/test.cpp:21 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 62 [ <retval> ])
        (nil)))
(insn 37 34 0 5 (use (reg/i:DI 0 ax)) lib/src/test.cpp:21 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Function (static initializers for lib/src/test.cpp) (_GLOBAL__sub_I_msg, funcdef_no=968, decl_uid=21547, cgraph_uid=430) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 59: (insn_list:REG_DEP_TRUE 5 (nil))
Reg 59 has equivalence, initial gains 4000

Pass 0 for finding pseudo/allocno costs

    a0 (r59,l0) best NO_REGS, allocno NO_REGS

  a0(r59,l0) costs: AREG:0,0 DREG:-1000,-1000 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 INDEX_REGS:0,0 GENERAL_REGS:0,0 LEGACY_REGS:0,0 CLOBBERED_REGS:0,0 SSE_FIRST_REG:16000,16000 SSE_REGS:16000,16000 MMX_REGS:26000,26000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:18000,18000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:7000,7000


Pass 1 for finding pseudo/allocno costs

    r59: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS

  a0(r59,l0) costs: AREG:8000,8000 DREG:3000,3000 CREG:8000,8000 BREG:8000,8000 SIREG:8000,8000 DIREG:8000,8000 AD_REGS:8000,8000 Q_REGS:8000,8000 NON_Q_REGS:8000,8000 INDEX_REGS:8000,8000 GENERAL_REGS:8000,8000 LEGACY_REGS:8000,8000 CLOBBERED_REGS:8000,8000 SSE_FIRST_REG:24000,24000 SSE_REGS:24000,24000 MMX_REGS:34000,34000 FP_TOP_SSE_REGS:2000000,2000000 FP_SECOND_SSE_REGS:2000000,2000000 FLOAT_SSE_REGS:2000000,2000000 FLOAT_INT_REGS:2000000,2000000 INT_SSE_REGS:26000,26000 FLOAT_INT_SSE_REGS:2000000,2000000 ALL_REGS:2000000,2000000 MEM:15000,15000

   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
   Insn 11(l0): point = 4
   Insn 10(l0): point = 6
   Insn 9(l0): point = 8
   Insn 8(l0): point = 10
   Insn 7(l0): point = 12
   Insn 6(l0): point = 14
   Insn 5(l0): point = 16
 a0(r59): [15..16]
Compressing live ranges: from 19 to 2 - 10%
Ranges after the compression:
 a0(r59): [0..1]
+++Allocating 0 bytes for conflict table (uncompressed size 8)
;; a0(r59,l0) conflicts:  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 2
    all: 0r59
    modified regnos: 59
    border:
    Pressure: GENERAL_REGS=3
    Hard reg set forest:
      0:( 0-6 8-15 21-51)@0
      Spill a0(r59,l0)
Disposition:
    0:r59  l0   mem
New iteration of spill/restore move
+++Costs: overall 15000, reg 0, mem 15000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


(static initializers for lib/src/test.cpp)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	 7 [sp] 16 [argp] 20 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={5d,2u} r2={3d} r4={5d,2u} r5={5d,2u} r6={1d,2u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,1u} r17={3d} r18={2d} r19={2d} r20={1d,3u,2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r59={1d,1u} 
;;    total ref usage 134{115d,17u,2e} in 9{7 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(6){ }u1(7){ }u2(16){ }u3(20){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (parallel [
            (set (reg/f:DI 59)
                (plus:DI (reg/f:DI 20 frame)
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) lib/src/test.cpp:15 274 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 6 5 7 2 (set (reg:DI 1 dx)
        (reg/f:DI 59)) lib/src/test.cpp:15 87 {*movdi_internal_rex64}
     (expr_list:REG_DEAD (reg/f:DI 59)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -1 [0xffffffffffffffff]))
            (nil))))
(insn 7 6 8 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f9b2272b1c8 *.LC0>)) lib/src/test.cpp:15 87 {*movdi_internal_rex64}
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("msg") [flags 0x2]  <var_decl 0x7f9b2258bed8 msg>)) lib/src/test.cpp:15 87 {*movdi_internal_rex64}
     (nil))
(call_insn 9 8 10 2 (call (mem:QI (symbol_ref:DI ("_ZNSsC1EPKcRKSaIcE") [flags 0x41]  <function_decl 0x7f9b22ae1700 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) lib/src/test.cpp:15 665 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (nil))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
(insn 10 9 11 2 (set (reg:DI 1 dx)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7f9b22664e40 __dso_handle>)) lib/src/test.cpp:15 87 {*movdi_internal_rex64}
     (nil))
(insn 11 10 12 2 (set (reg:DI 4 si)
        (symbol_ref:DI ("msg") [flags 0x2]  <var_decl 0x7f9b2258bed8 msg>)) lib/src/test.cpp:15 87 {*movdi_internal_rex64}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (symbol_ref:DI ("_ZNSsD1Ev") [flags 0x41]  <function_decl 0x7f9b22ae4500 __comp_dtor >)) lib/src/test.cpp:15 87 {*movdi_internal_rex64}
     (nil))
(call_insn 13 12 0 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7f9b226b2100 __cxa_atexit>) [0 __cxa_atexit S1 A8])
            (const_int 0 [0]))) lib/src/test.cpp:15 672 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 5 di))
        (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 4 si))
            (expr_list:REG_FRAME_RELATED_EXPR (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]

